# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import pytz
import random

from factory import (
    alchemy, lazy_attribute, Sequence, Iterator, LazyAttribute, RelatedFactory,
)
from factory.fuzzy import FuzzyAttribute, FuzzyInteger, FuzzyChoice
from faker import Faker

from app.db import db
from app.signatures.utils import generate_sid
from app.users.models import User
from app.users.tests.factories import UserFactory

from ..constants import (
    SEVERITY_LEVEL_TO_PRIORITY_MAP, RULE_ACTIONS,
    SIGNATURE_AUTOGENERATED_NAME_FORMAT,
)
from ..models import (
    Signature, SignatureCategory, SignatureClassType, SignatureSeverity,
    SignatureProtocol, SignatureReferenceType, SignatureReference,
)


FAKE = Faker()


class SignatureCategoryFactory(alchemy.SQLAlchemyModelFactory):
    name = Sequence(
        lambda n: "Category {0} {1}".format(FAKE.word(), n).capitalize()
    )
    description = FuzzyAttribute(FAKE.text)

    class Meta:
        model = SignatureCategory
        sqlalchemy_session = db.session


class SignatureClassTypeFactory(alchemy.SQLAlchemyModelFactory):
    short_name = Sequence(
        lambda n: "{0}-{1}".format(FAKE.slug(), n)
    )
    name = LazyAttribute(
        lambda o: SignatureClassType.generate_name(o.short_name)
    )
    priority = FuzzyChoice(
        SEVERITY_LEVEL_TO_PRIORITY_MAP.values()
    )

    class Meta:
        model = SignatureClassType
        sqlalchemy_session = db.session


class SignatureSeverityFactory(alchemy.SQLAlchemyModelFactory):
    name = Sequence(
        lambda n: "Severity {0} {1}".format(FAKE.word(), n).capitalize()
    )
    text_color = FuzzyAttribute(FAKE.safe_hex_color)
    bg_color = FuzzyAttribute(FAKE.safe_hex_color)
    weight = FuzzyInteger(
        low=1,
        high=255,
    )
    is_predefined = FuzzyAttribute(FAKE.boolean)

    class Meta:
        model = SignatureSeverity
        sqlalchemy_session = db.session


class SignatureProtocolFactory(alchemy.SQLAlchemyModelFactory):
    name = Sequence(
        lambda n: "{0}-{1}".format(FAKE.slug(), n)
    )

    class Meta:
        model = SignatureProtocol
        sqlalchemy_session = db.session


class SignatureReferenceTypeFactory(alchemy.SQLAlchemyModelFactory):
    name = Sequence(
        lambda n: "{0}-{1}".format(FAKE.slug(), n)
    )
    url_prefix = FuzzyAttribute(
        lambda: FAKE.uri().rstrip("/") + "/?id="
    )

    class Meta:
        model = SignatureReferenceType
        sqlalchemy_session = db.session


class SignatureReferenceFactory(alchemy.SQLAlchemyModelFactory):
    value = FuzzyAttribute(FAKE.random_int)

    @lazy_attribute
    def reference_type(self):
        count = SignatureReferenceType.query.count()

        if count:
            index = random.randint(0, count - 1)
            return SignatureReferenceType.query[index]
        else:
            return SignatureReferenceTypeFactory()

    class Meta:
        model = SignatureReference
        sqlalchemy_session = db.session


class SignatureFactory(alchemy.SQLAlchemyModelFactory):
    action = Iterator(
        RULE_ACTIONS._asdict().values()
    )
    src_host = FuzzyAttribute(FAKE.ipv4)
    src_port = FuzzyInteger(
        low=1025,
        high=65335,
    )
    dst_host = FuzzyAttribute(FAKE.ipv4)
    dst_port = FuzzyInteger(
        low=1025,
        high=65335,
    )
    is_bidirectional = FuzzyAttribute(FAKE.boolean)
    name = LazyAttribute(
        lambda o: SIGNATURE_AUTOGENERATED_NAME_FORMAT.format(
            sid=o.sid, message=o.message,
        )
    )
    message = FuzzyAttribute(FAKE.sentence)
    flow_control = FuzzyAttribute(
        lambda: "flow: " + FAKE.sentence() + ";"
    )
    content_control = FuzzyAttribute(
        lambda: "content: " + FAKE.sentence() + ";"
    )
    priority = FuzzyInteger(
        low=1,
        high=255,
    )
    sid = FuzzyAttribute(generate_sid)
    gid = FuzzyInteger(
        low=1,
        high=255,
    )
    revision = FuzzyInteger(
        low=1,
        high=255,
    )
    is_editable = FuzzyAttribute(FAKE.boolean)
    created_at = FuzzyAttribute(
        lambda: pytz.utc.localize(FAKE.date_time_this_month())
    )
    references = RelatedFactory(SignatureReferenceFactory, 'signature')

    @lazy_attribute
    def protocol(self):
        count = SignatureProtocol.query.count()

        if count:
            index = random.randint(0, count - 1)
            return SignatureProtocol.query[index]
        else:
            return SignatureProtocolFactory()

    @lazy_attribute
    def category(self):
        count = SignatureCategory.query.count()

        if count:
            index = random.randint(0, count - 1)
            return SignatureCategory.query[index]
        else:
            return SignatureCategoryFactory()

    @lazy_attribute
    def class_type(self):
        count = SignatureClassType.query.count()

        if count:
            index = random.randint(0, count - 1)
            return SignatureClassType.query[index]
        else:
            return SignatureClassTypeFactory()

    @lazy_attribute
    def severity(self):
        count = SignatureSeverity.query.count()

        if count:
            index = random.randint(0, count - 1)
            return SignatureSeverity.query[index]
        else:
            return SignatureSeverityFactory()

    @lazy_attribute
    def created_by(self):
        count = User.query.count()

        if count:
            index = random.randint(0, count - 1)
            return User.query[index]
        else:
            return UserFactory()

    class Meta:
        model = Signature
        sqlalchemy_session = db.session
