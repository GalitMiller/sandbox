# Generated from <%= package.spec.file_name %> by gem2rpm -*- rpm-spec -*-
%global gem_name <%= spec.name %>
%global rubyprefix ruby193-

# The RubyGems root folder.
%global gem_dir %{_datadir}/gems
%global gem_archdir %{_libdir}/ruby

# Common gem locations and files.
%global gem_instdir %{gem_dir}/gems/%{gem_name}-%{version}
%global gem_extdir_mri %{gem_archdir}/vendor_ruby
%global gem_libdir %{gem_instdir}/lib
%global gem_cache %{gem_dir}/cache/%{gem_name}-%{version}.gem
%global gem_spec %{gem_dir}/specifications/%{gem_name}-%{version}.gemspec
%global gem_docdir %{gem_dir}/doc/%{gem_name}-%{version}

# Install gem into appropriate directory.
# -n<gem_file>      Overrides gem file name for installation.
# -d<install_dir>   Set installation directory.
%global gem_install(d:n:) \
mkdir -p %{-d*}%{!?-d:.%{gem_dir}} \
\
CONFIGURE_ARGS="--with-cflags='%{optflags}' $CONFIGURE_ARGS" \\\
gem install \\\
        -V \\\
        --local \\\
        --install-dir %{-d*}%{!?-d:.%{gem_dir}} \\\
        --bindir .%{_bindir} \\\
        --force \\\
        %{-n*}%{!?-n:%{gem_name}-%{version}.gem} \
%{nil}

# For rubygems packages we want to filter out any provides caused by private
# libs in %%{gem_archdir}.
%global __provides_exclude_from %{?__provides_exclude_from:%{__provides_exclude_from}|}^%{gem_extdir_mri}/.*\\\\.so$ \


Name: %{rubyprefix}rubygem-%{gem_name}
Conflicts: rubygem-%{gem_name}
Provides:  %{rubyprefix}rubygem(%{gem_name})
Version: <%= spec.version %>
Release: 1%{?dist}
Summary: <%= spec.summary.gsub(/\.$/, "") %>
Group: Development/Languages
License: Unknown
<% if spec.homepage -%>
URL: <%= spec.homepage %>
<% end -%>
Source0: <%= download_path %>%{gem_name}-%{version}.gem
BuildRequires: %{rubyprefix}ruby(release)
BuildRequires: %{rubyprefix}rubygem(rdoc)
BuildRequires: %{rubyprefix}rubygem(json)
BuildRequires: %{rubyprefix}ruby(irb)
<% for req in spec.required_rubygems_version -%>
BuildRequires: <%= requirement '%{rubyprefix}rubygems-devel', req %>
<% end -%>
<% for req in spec.required_ruby_version -%>
BuildRequires: <%= requirement "%{rubyprefix}ruby#{'-devel' unless spec.extensions.empty?}", req %>
<% end -%>
<% for d in spec.development_dependencies -%>
<% unless ["rdoc", "rake", "bundler"].include? d.name -%>
<% for req in d.requirement -%>
#BuildRequires: <%= requirement "%{rubyprefix}rubygem(#{d.name})", req %>
<% end -%>
<% end -%>
<% end -%>
<% if spec.extensions.empty? -%>
BuildArch: noarch
<% end -%>

%description
<%= spec.description %>

<% if doc_subpackage -%>
%package doc
Summary: Documentation for %{name}
Group: Documentation
Requires: %{name} = %{version}-%{release}
BuildArch: noarch

%description doc
Documentation for %{name}.
<% end # if doc_subpackage -%>

%prep
export LANG=en_US.utf8
gem unpack %{SOURCE0}

%setup -q -D -T -n  %{gem_name}-%{version}

gem spec %{SOURCE0} -l --ruby > %{gem_name}.gemspec

%build
export LANG=en_US.utf8
# Create the gem as gem install only works on a gem file
gem build %{gem_name}.gemspec

# %%gem_install compiles any C extensions and installs the gem into ./%%gem_dir
# by default, so that we can move it into the buildroot in %%install
%gem_install

%install
export LANG=en_US.utf8
mkdir -p %{buildroot}%{gem_dir}
cp -a .%{gem_dir}/* \
        %{buildroot}%{gem_dir}/

<% unless spec.extensions.empty? -%>
# Move C extension to the ext dir
mkdir -p %{buildroot}%{gem_extdir_mri}
find %{buildroot}%{gem_instdir}/ext/ -name '*.so' -type f -exec cp -a -t %{buildroot}%{gem_extdir_mri}/ '{}' '+'
find %{buildroot}%{gem_dir}/ -name '*.so' -type f -exec rm -f '{}' '+'

<% end -%>

<% unless spec.executables.nil? or spec.executables.empty? -%>
mkdir -p %{buildroot}%{_bindir}
cp -pa .%{_bindir}/* \
        %{buildroot}%{_bindir}/
<% end -%>

<% unless spec.executables.empty? -%>
find %{buildroot}%{gem_instdir}/bin -type f | xargs chmod a+x
<% end -%>

# Run the test suite
%check
#pushd .%{gem_instdir}
#
#popd

%files
%dir %{gem_instdir}
<% unless spec.executables.nil? or spec.executables.empty? -%>
<% for f in spec.executables -%>
%{_bindir}/<%= f %>
<% end -%>
<% end -%>
<% unless spec.extensions.empty? -%>
%{gem_extdir_mri}
<% end -%>
<%= main_file_entries(spec) %>
<% unless doc_subpackage -%>
%doc %{gem_docdir}
<%= doc_file_entries(spec) -%>
<% end -%>
%exclude %{gem_cache}
%{gem_spec}

<% if doc_subpackage -%>
%files doc
%doc %{gem_docdir}
<%= doc_file_entries(spec) %>
<% end # if doc_subpackage -%>

%changelog
* <%= Time.now.strftime("%a %b %d %Y") %> <%= packager %> - <%= spec.version %>-1
- Initial package
